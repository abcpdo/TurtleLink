// Generated by gencpp from file rsp_msgs/MoveRequest.msg
// DO NOT EDIT!


#ifndef RSP_MSGS_MESSAGE_MOVEREQUEST_H
#define RSP_MSGS_MESSAGE_MOVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rsp_msgs
{
template <class ContainerAllocator>
struct MoveRequest_
{
  typedef MoveRequest_<ContainerAllocator> Type;

  MoveRequest_()
    : name()
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
    }
  MoveRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::rsp_msgs::MoveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rsp_msgs::MoveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRequest_

typedef ::rsp_msgs::MoveRequest_<std::allocator<void> > MoveRequest;

typedef boost::shared_ptr< ::rsp_msgs::MoveRequest > MoveRequestPtr;
typedef boost::shared_ptr< ::rsp_msgs::MoveRequest const> MoveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rsp_msgs::MoveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rsp_msgs::MoveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rsp_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rsp_msgs': ['/home/kaiyu/Dropbox/College/Grad/RSP/git_repos/530_707_independent_project/ros_workspace/src/rsp_pkg/rsp_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rsp_msgs::MoveRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rsp_msgs::MoveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rsp_msgs::MoveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f339950ac49a5a6e2e829687377f187";
  }

  static const char* value(const ::rsp_msgs::MoveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f339950ac49a5a6ULL;
  static const uint64_t static_value2 = 0xe2e829687377f187ULL;
};

template<class ContainerAllocator>
struct DataType< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rsp_msgs/MoveRequest";
  }

  static const char* value(const ::rsp_msgs::MoveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
float32 x\n\
float32 y\n\
float32 theta\n\
";
  }

  static const char* value(const ::rsp_msgs::MoveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rsp_msgs::MoveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rsp_msgs::MoveRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RSP_MSGS_MESSAGE_MOVEREQUEST_H
