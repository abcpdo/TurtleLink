// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_map_request.proto

#include "collision_map_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_vector2d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector2d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector2d;
}  // namespace protobuf_vector2d_2eproto
namespace collision_map_creator_msgs {
namespace msgs {
class CollisionMapRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CollisionMapRequest>
      _instance;
} _CollisionMapRequest_default_instance_;
}  // namespace msgs
}  // namespace collision_map_creator_msgs
namespace protobuf_collision_5fmap_5frequest_2eproto {
static void InitDefaultsCollisionMapRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_;
    new (ptr) ::collision_map_creator_msgs::msgs::CollisionMapRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::collision_map_creator_msgs::msgs::CollisionMapRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CollisionMapRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCollisionMapRequest}, {
      &protobuf_vector2d_2eproto::scc_info_Vector2d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CollisionMapRequest.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, upperleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, upperright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, lowerright_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, lowerleft_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::collision_map_creator_msgs::msgs::CollisionMapRequest, threshold_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::collision_map_creator_msgs::msgs::CollisionMapRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "collision_map_request.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033collision_map_request.proto\022\037collision"
      "_map_creator_msgs.msgs\032\016vector2d.proto\"\217"
      "\002\n\023CollisionMapRequest\022(\n\tupperLeft\030\001 \002("
      "\0132\025.gazebo.msgs.Vector2d\022)\n\nupperRight\030\002"
      " \002(\0132\025.gazebo.msgs.Vector2d\022)\n\nlowerRigh"
      "t\030\003 \002(\0132\025.gazebo.msgs.Vector2d\022(\n\tlowerL"
      "eft\030\004 \002(\0132\025.gazebo.msgs.Vector2d\022\016\n\006heig"
      "ht\030\005 \002(\001\022\022\n\nresolution\030\006 \002(\001\022\022\n\010filename"
      "\030\007 \001(\t:\000\022\026\n\tthreshold\030\010 \001(\005:\003255"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "collision_map_request.proto", &protobuf_RegisterTypes);
  ::protobuf_vector2d_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_collision_5fmap_5frequest_2eproto
namespace collision_map_creator_msgs {
namespace msgs {

// ===================================================================

void CollisionMapRequest::InitAsDefaultInstance() {
  ::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_._instance.get_mutable()->upperleft_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
  ::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_._instance.get_mutable()->upperright_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
  ::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_._instance.get_mutable()->lowerright_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
  ::collision_map_creator_msgs::msgs::_CollisionMapRequest_default_instance_._instance.get_mutable()->lowerleft_ = const_cast< ::gazebo::msgs::Vector2d*>(
      ::gazebo::msgs::Vector2d::internal_default_instance());
}
void CollisionMapRequest::clear_upperleft() {
  if (upperleft_ != NULL) upperleft_->Clear();
  clear_has_upperleft();
}
void CollisionMapRequest::clear_upperright() {
  if (upperright_ != NULL) upperright_->Clear();
  clear_has_upperright();
}
void CollisionMapRequest::clear_lowerright() {
  if (lowerright_ != NULL) lowerright_->Clear();
  clear_has_lowerright();
}
void CollisionMapRequest::clear_lowerleft() {
  if (lowerleft_ != NULL) lowerleft_->Clear();
  clear_has_lowerleft();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CollisionMapRequest::kUpperLeftFieldNumber;
const int CollisionMapRequest::kUpperRightFieldNumber;
const int CollisionMapRequest::kLowerRightFieldNumber;
const int CollisionMapRequest::kLowerLeftFieldNumber;
const int CollisionMapRequest::kHeightFieldNumber;
const int CollisionMapRequest::kResolutionFieldNumber;
const int CollisionMapRequest::kFilenameFieldNumber;
const int CollisionMapRequest::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CollisionMapRequest::CollisionMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_collision_5fmap_5frequest_2eproto::scc_info_CollisionMapRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
}
CollisionMapRequest::CollisionMapRequest(const CollisionMapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.has_upperleft()) {
    upperleft_ = new ::gazebo::msgs::Vector2d(*from.upperleft_);
  } else {
    upperleft_ = NULL;
  }
  if (from.has_upperright()) {
    upperright_ = new ::gazebo::msgs::Vector2d(*from.upperright_);
  } else {
    upperright_ = NULL;
  }
  if (from.has_lowerright()) {
    lowerright_ = new ::gazebo::msgs::Vector2d(*from.lowerright_);
  } else {
    lowerright_ = NULL;
  }
  if (from.has_lowerleft()) {
    lowerleft_ = new ::gazebo::msgs::Vector2d(*from.lowerleft_);
  } else {
    lowerleft_ = NULL;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&height_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
}

void CollisionMapRequest::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&upperleft_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolution_) -
      reinterpret_cast<char*>(&upperleft_)) + sizeof(resolution_));
  threshold_ = 255;
}

CollisionMapRequest::~CollisionMapRequest() {
  // @@protoc_insertion_point(destructor:collision_map_creator_msgs.msgs.CollisionMapRequest)
  SharedDtor();
}

void CollisionMapRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete upperleft_;
  if (this != internal_default_instance()) delete upperright_;
  if (this != internal_default_instance()) delete lowerright_;
  if (this != internal_default_instance()) delete lowerleft_;
}

void CollisionMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CollisionMapRequest::descriptor() {
  ::protobuf_collision_5fmap_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_collision_5fmap_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CollisionMapRequest& CollisionMapRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_collision_5fmap_5frequest_2eproto::scc_info_CollisionMapRequest.base);
  return *internal_default_instance();
}


void CollisionMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upperleft_ != NULL);
      upperleft_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(upperright_ != NULL);
      upperright_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(lowerright_ != NULL);
      lowerright_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(lowerleft_ != NULL);
      lowerleft_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&resolution_) -
        reinterpret_cast<char*>(&height_)) + sizeof(resolution_));
    threshold_ = 255;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CollisionMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gazebo.msgs.Vector2d upperLeft = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upperleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector2d upperRight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_upperright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector2d lowerRight = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lowerright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector2d lowerLeft = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lowerleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double resolution = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 7 [default = ""];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 threshold = 8 [default = 255];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return false;
#undef DO_
}

void CollisionMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector2d upperLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_upperleft(), output);
  }

  // required .gazebo.msgs.Vector2d upperRight = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_upperright(), output);
  }

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_lowerright(), output);
  }

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_lowerleft(), output);
  }

  // required double height = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // required double resolution = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->resolution(), output);
  }

  // optional string filename = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->filename(), output);
  }

  // optional int32 threshold = 8 [default = 255];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:collision_map_creator_msgs.msgs.CollisionMapRequest)
}

::google::protobuf::uint8* CollisionMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Vector2d upperLeft = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_upperleft(), deterministic, target);
  }

  // required .gazebo.msgs.Vector2d upperRight = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_upperright(), deterministic, target);
  }

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_lowerright(), deterministic, target);
  }

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_lowerleft(), deterministic, target);
  }

  // required double height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // required double resolution = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->resolution(), target);
  }

  // optional string filename = 7 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "collision_map_creator_msgs.msgs.CollisionMapRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->filename(), target);
  }

  // optional int32 threshold = 8 [default = 255];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:collision_map_creator_msgs.msgs.CollisionMapRequest)
  return target;
}

size_t CollisionMapRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  size_t total_size = 0;

  if (has_upperleft()) {
    // required .gazebo.msgs.Vector2d upperLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperleft_);
  }

  if (has_upperright()) {
    // required .gazebo.msgs.Vector2d upperRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperright_);
  }

  if (has_lowerright()) {
    // required .gazebo.msgs.Vector2d lowerRight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerright_);
  }

  if (has_lowerleft()) {
    // required .gazebo.msgs.Vector2d lowerLeft = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerleft_);
  }

  if (has_height()) {
    // required double height = 5;
    total_size += 1 + 8;
  }

  if (has_resolution()) {
    // required double resolution = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CollisionMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007e) ^ 0x0000007e) == 0) {  // All required fields are present.
    // required .gazebo.msgs.Vector2d upperLeft = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperleft_);

    // required .gazebo.msgs.Vector2d upperRight = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *upperright_);

    // required .gazebo.msgs.Vector2d lowerRight = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerright_);

    // required .gazebo.msgs.Vector2d lowerLeft = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lowerleft_);

    // required double height = 5;
    total_size += 1 + 8;

    // required double resolution = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string filename = 7 [default = ""];
  if (has_filename()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // optional int32 threshold = 8 [default = 255];
  if (has_threshold()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->threshold());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollisionMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CollisionMapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CollisionMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:collision_map_creator_msgs.msgs.CollisionMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:collision_map_creator_msgs.msgs.CollisionMapRequest)
    MergeFrom(*source);
  }
}

void CollisionMapRequest::MergeFrom(const CollisionMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_upperleft()->::gazebo::msgs::Vector2d::MergeFrom(from.upperleft());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_upperright()->::gazebo::msgs::Vector2d::MergeFrom(from.upperright());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_lowerright()->::gazebo::msgs::Vector2d::MergeFrom(from.lowerright());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_lowerleft()->::gazebo::msgs::Vector2d::MergeFrom(from.lowerleft());
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      resolution_ = from.resolution_;
    }
    if (cached_has_bits & 0x00000080u) {
      threshold_ = from.threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CollisionMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollisionMapRequest::CopyFrom(const CollisionMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:collision_map_creator_msgs.msgs.CollisionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  if (has_upperleft()) {
    if (!this->upperleft_->IsInitialized()) return false;
  }
  if (has_upperright()) {
    if (!this->upperright_->IsInitialized()) return false;
  }
  if (has_lowerright()) {
    if (!this->lowerright_->IsInitialized()) return false;
  }
  if (has_lowerleft()) {
    if (!this->lowerleft_->IsInitialized()) return false;
  }
  return true;
}

void CollisionMapRequest::Swap(CollisionMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CollisionMapRequest::InternalSwap(CollisionMapRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(upperleft_, other->upperleft_);
  swap(upperright_, other->upperright_);
  swap(lowerright_, other->lowerright_);
  swap(lowerleft_, other->lowerleft_);
  swap(height_, other->height_);
  swap(resolution_, other->resolution_);
  swap(threshold_, other->threshold_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CollisionMapRequest::GetMetadata() const {
  protobuf_collision_5fmap_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_collision_5fmap_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace collision_map_creator_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::collision_map_creator_msgs::msgs::CollisionMapRequest* Arena::CreateMaybeMessage< ::collision_map_creator_msgs::msgs::CollisionMapRequest >(Arena* arena) {
  return Arena::CreateInternal< ::collision_map_creator_msgs::msgs::CollisionMapRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
