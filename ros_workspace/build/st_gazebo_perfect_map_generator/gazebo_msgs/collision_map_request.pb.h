// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collision_map_request.proto

#ifndef PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto
#define PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vector2d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_collision_5fmap_5frequest_2eproto 

namespace protobuf_collision_5fmap_5frequest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_collision_5fmap_5frequest_2eproto
namespace collision_map_creator_msgs {
namespace msgs {
class CollisionMapRequest;
class CollisionMapRequestDefaultTypeInternal;
extern CollisionMapRequestDefaultTypeInternal _CollisionMapRequest_default_instance_;
}  // namespace msgs
}  // namespace collision_map_creator_msgs
namespace google {
namespace protobuf {
template<> ::collision_map_creator_msgs::msgs::CollisionMapRequest* Arena::CreateMaybeMessage<::collision_map_creator_msgs::msgs::CollisionMapRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace collision_map_creator_msgs {
namespace msgs {

// ===================================================================

class CollisionMapRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:collision_map_creator_msgs.msgs.CollisionMapRequest) */ {
 public:
  CollisionMapRequest();
  virtual ~CollisionMapRequest();

  CollisionMapRequest(const CollisionMapRequest& from);

  inline CollisionMapRequest& operator=(const CollisionMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CollisionMapRequest(CollisionMapRequest&& from) noexcept
    : CollisionMapRequest() {
    *this = ::std::move(from);
  }

  inline CollisionMapRequest& operator=(CollisionMapRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollisionMapRequest* internal_default_instance() {
    return reinterpret_cast<const CollisionMapRequest*>(
               &_CollisionMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CollisionMapRequest* other);
  friend void swap(CollisionMapRequest& a, CollisionMapRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollisionMapRequest* New() const final {
    return CreateMaybeMessage<CollisionMapRequest>(NULL);
  }

  CollisionMapRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CollisionMapRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CollisionMapRequest& from);
  void MergeFrom(const CollisionMapRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionMapRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string filename = 7 [default = ""];
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 7;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // required .gazebo.msgs.Vector2d upperLeft = 1;
  bool has_upperleft() const;
  void clear_upperleft();
  static const int kUpperLeftFieldNumber = 1;
  private:
  const ::gazebo::msgs::Vector2d& _internal_upperleft() const;
  public:
  const ::gazebo::msgs::Vector2d& upperleft() const;
  ::gazebo::msgs::Vector2d* release_upperleft();
  ::gazebo::msgs::Vector2d* mutable_upperleft();
  void set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft);

  // required .gazebo.msgs.Vector2d upperRight = 2;
  bool has_upperright() const;
  void clear_upperright();
  static const int kUpperRightFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector2d& _internal_upperright() const;
  public:
  const ::gazebo::msgs::Vector2d& upperright() const;
  ::gazebo::msgs::Vector2d* release_upperright();
  ::gazebo::msgs::Vector2d* mutable_upperright();
  void set_allocated_upperright(::gazebo::msgs::Vector2d* upperright);

  // required .gazebo.msgs.Vector2d lowerRight = 3;
  bool has_lowerright() const;
  void clear_lowerright();
  static const int kLowerRightFieldNumber = 3;
  private:
  const ::gazebo::msgs::Vector2d& _internal_lowerright() const;
  public:
  const ::gazebo::msgs::Vector2d& lowerright() const;
  ::gazebo::msgs::Vector2d* release_lowerright();
  ::gazebo::msgs::Vector2d* mutable_lowerright();
  void set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright);

  // required .gazebo.msgs.Vector2d lowerLeft = 4;
  bool has_lowerleft() const;
  void clear_lowerleft();
  static const int kLowerLeftFieldNumber = 4;
  private:
  const ::gazebo::msgs::Vector2d& _internal_lowerleft() const;
  public:
  const ::gazebo::msgs::Vector2d& lowerleft() const;
  ::gazebo::msgs::Vector2d* release_lowerleft();
  ::gazebo::msgs::Vector2d* mutable_lowerleft();
  void set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft);

  // required double height = 5;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 5;
  double height() const;
  void set_height(double value);

  // required double resolution = 6;
  bool has_resolution() const;
  void clear_resolution();
  static const int kResolutionFieldNumber = 6;
  double resolution() const;
  void set_resolution(double value);

  // optional int32 threshold = 8 [default = 255];
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 8;
  ::google::protobuf::int32 threshold() const;
  void set_threshold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:collision_map_creator_msgs.msgs.CollisionMapRequest)
 private:
  void set_has_upperleft();
  void clear_has_upperleft();
  void set_has_upperright();
  void clear_has_upperright();
  void set_has_lowerright();
  void clear_has_lowerright();
  void set_has_lowerleft();
  void clear_has_lowerleft();
  void set_has_height();
  void clear_has_height();
  void set_has_resolution();
  void clear_has_resolution();
  void set_has_filename();
  void clear_has_filename();
  void set_has_threshold();
  void clear_has_threshold();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::gazebo::msgs::Vector2d* upperleft_;
  ::gazebo::msgs::Vector2d* upperright_;
  ::gazebo::msgs::Vector2d* lowerright_;
  ::gazebo::msgs::Vector2d* lowerleft_;
  double height_;
  double resolution_;
  ::google::protobuf::int32 threshold_;
  friend struct ::protobuf_collision_5fmap_5frequest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollisionMapRequest

// required .gazebo.msgs.Vector2d upperLeft = 1;
inline bool CollisionMapRequest::has_upperleft() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollisionMapRequest::set_has_upperleft() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollisionMapRequest::clear_has_upperleft() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_upperleft() const {
  return *upperleft_;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperleft() const {
  const ::gazebo::msgs::Vector2d* p = upperleft_;
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  clear_has_upperleft();
  ::gazebo::msgs::Vector2d* temp = upperleft_;
  upperleft_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperleft() {
  set_has_upperleft();
  if (upperleft_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    upperleft_ = p;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
  return upperleft_;
}
inline void CollisionMapRequest::set_allocated_upperleft(::gazebo::msgs::Vector2d* upperleft) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upperleft_);
  }
  if (upperleft) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upperleft = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upperleft, submessage_arena);
    }
    set_has_upperleft();
  } else {
    clear_has_upperleft();
  }
  upperleft_ = upperleft;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperLeft)
}

// required .gazebo.msgs.Vector2d upperRight = 2;
inline bool CollisionMapRequest::has_upperright() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CollisionMapRequest::set_has_upperright() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CollisionMapRequest::clear_has_upperright() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_upperright() const {
  return *upperright_;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::upperright() const {
  const ::gazebo::msgs::Vector2d* p = upperright_;
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_upperright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  clear_has_upperright();
  ::gazebo::msgs::Vector2d* temp = upperright_;
  upperright_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_upperright() {
  set_has_upperright();
  if (upperright_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    upperright_ = p;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
  return upperright_;
}
inline void CollisionMapRequest::set_allocated_upperright(::gazebo::msgs::Vector2d* upperright) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(upperright_);
  }
  if (upperright) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upperright = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upperright, submessage_arena);
    }
    set_has_upperright();
  } else {
    clear_has_upperright();
  }
  upperright_ = upperright;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.upperRight)
}

// required .gazebo.msgs.Vector2d lowerRight = 3;
inline bool CollisionMapRequest::has_lowerright() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CollisionMapRequest::set_has_lowerright() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CollisionMapRequest::clear_has_lowerright() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_lowerright() const {
  return *lowerright_;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerright() const {
  const ::gazebo::msgs::Vector2d* p = lowerright_;
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerright() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  clear_has_lowerright();
  ::gazebo::msgs::Vector2d* temp = lowerright_;
  lowerright_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerright() {
  set_has_lowerright();
  if (lowerright_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    lowerright_ = p;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
  return lowerright_;
}
inline void CollisionMapRequest::set_allocated_lowerright(::gazebo::msgs::Vector2d* lowerright) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lowerright_);
  }
  if (lowerright) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowerright = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowerright, submessage_arena);
    }
    set_has_lowerright();
  } else {
    clear_has_lowerright();
  }
  lowerright_ = lowerright;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerRight)
}

// required .gazebo.msgs.Vector2d lowerLeft = 4;
inline bool CollisionMapRequest::has_lowerleft() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CollisionMapRequest::set_has_lowerleft() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CollisionMapRequest::clear_has_lowerleft() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::_internal_lowerleft() const {
  return *lowerleft_;
}
inline const ::gazebo::msgs::Vector2d& CollisionMapRequest::lowerleft() const {
  const ::gazebo::msgs::Vector2d* p = lowerleft_;
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector2d*>(
      &::gazebo::msgs::_Vector2d_default_instance_);
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::release_lowerleft() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  clear_has_lowerleft();
  ::gazebo::msgs::Vector2d* temp = lowerleft_;
  lowerleft_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector2d* CollisionMapRequest::mutable_lowerleft() {
  set_has_lowerleft();
  if (lowerleft_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector2d>(GetArenaNoVirtual());
    lowerleft_ = p;
  }
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
  return lowerleft_;
}
inline void CollisionMapRequest::set_allocated_lowerleft(::gazebo::msgs::Vector2d* lowerleft) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lowerleft_);
  }
  if (lowerleft) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lowerleft = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lowerleft, submessage_arena);
    }
    set_has_lowerleft();
  } else {
    clear_has_lowerleft();
  }
  lowerleft_ = lowerleft;
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.lowerLeft)
}

// required double height = 5;
inline bool CollisionMapRequest::has_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CollisionMapRequest::set_has_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CollisionMapRequest::clear_has_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CollisionMapRequest::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline double CollisionMapRequest::height() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
  return height_;
}
inline void CollisionMapRequest::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.height)
}

// required double resolution = 6;
inline bool CollisionMapRequest::has_resolution() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CollisionMapRequest::set_has_resolution() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CollisionMapRequest::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CollisionMapRequest::clear_resolution() {
  resolution_ = 0;
  clear_has_resolution();
}
inline double CollisionMapRequest::resolution() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
  return resolution_;
}
inline void CollisionMapRequest::set_resolution(double value) {
  set_has_resolution();
  resolution_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.resolution)
}

// optional string filename = 7 [default = ""];
inline bool CollisionMapRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollisionMapRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollisionMapRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollisionMapRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& CollisionMapRequest::filename() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.GetNoArena();
}
inline void CollisionMapRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
#if LANG_CXX11
inline void CollisionMapRequest::set_filename(::std::string&& value) {
  set_has_filename();
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
#endif
inline void CollisionMapRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline void CollisionMapRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}
inline ::std::string* CollisionMapRequest::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CollisionMapRequest::release_filename() {
  // @@protoc_insertion_point(field_release:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
  if (!has_filename()) {
    return NULL;
  }
  clear_has_filename();
  return filename_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CollisionMapRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:collision_map_creator_msgs.msgs.CollisionMapRequest.filename)
}

// optional int32 threshold = 8 [default = 255];
inline bool CollisionMapRequest::has_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CollisionMapRequest::set_has_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CollisionMapRequest::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CollisionMapRequest::clear_threshold() {
  threshold_ = 255;
  clear_has_threshold();
}
inline ::google::protobuf::int32 CollisionMapRequest::threshold() const {
  // @@protoc_insertion_point(field_get:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
  return threshold_;
}
inline void CollisionMapRequest::set_threshold(::google::protobuf::int32 value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:collision_map_creator_msgs.msgs.CollisionMapRequest.threshold)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace collision_map_creator_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_collision_5fmap_5frequest_2eproto
